.ds-checkbox {
  --dsc-checkbox-size: 1.75rem;
  --dsc-checkbox-focus-border-width: 3px;
  --dsc-checkbox-background: var(--ds-color-neutral-background-default);
  --dsc-checkbox-border-color: var(--ds-color-neutral-border-default);
  --dsc-checkbox-border__hover--size: calc(var(--ds-spacing-3) / 2);
  --dsc-checkbox-border__hover: 0 0 0 var(--dsc-checkbox-border__hover--size) var(--ds-color-accent-surface-hover);
  --dsc-checkbox-check_color: transparent;

  display: grid;
}

.ds-checkbox:has(.ds-checkbox__label) {
  grid-template-columns: var(--dsc-checkbox-size) auto;
  gap: var(--ds-spacing-2);
}

/* Checkbox */
.ds-checkbox__input {
  position: relative;
  width: var(--dsc-checkbox-size);
  height: var(--dsc-checkbox-size);
  z-index: 1;
  appearance: none;
  margin: 0;
  align-self: center;
  outline: none;
  cursor: pointer;
  box-shadow: inset 0 0 0 2px var(--dsc-checkbox-border-color);
  background: var(--dsc-checkbox-background);
  border-radius: min(0.25rem, var(--ds-border-radius-md));
}

.ds-checkbox__input::before {
  position: absolute;
  content: '';
  display: block;
  width: 2.75rem;
  height: 2.75rem;
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
  cursor: pointer;
  border-radius: var(--ds-border-radius-md);
}

.ds-checkbox__label {
  /* min-height: var(--ds-sizing-10); */
  min-width: min-content;
  display: inline-flex;
  flex-direction: row;
  gap: var(--ds-spacing-1);
  align-items: center;
  cursor: pointer;
}

.ds-checkbox__description {
  margin-top: calc(var(--ds-spacing-2) * -1);
  color: var(--ds-color-neutral-text-subtle);
  grid-column: 2;
}

.ds-checkbox--readonly > .ds-checkbox__label,
.ds-checkbox--readonly > .ds-checkbox__input,
.ds-checkbox--readonly > .ds-checkbox__input::before {
  cursor: default;
}

.ds-checkbox__input:disabled,
.ds-checkbox__input:disabled ~ .ds-checkbox__label,
.ds-checkbox__input:disabled::before {
  cursor: not-allowed;
}

/*   .ds-checkbox__input:focus-visible {
    outline-offset: 3px;
    outline: var(--dsc-checkbox-focus-border-width) solid var(--ds-color-focus-outer);
    box-shadow:
      0 0 0 var(--dsc-checkbox-focus-border-width) var(--ds-color-focus-inner),
      inset 0 0 0 2px var(--dsc-checkbox-border-color);
  } */

.ds-checkbox__input::after {
  content: '';
  width: 100%;
  height: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--dsc-checkbox-check_color);
  mask-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 23 23' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18.5509 6.32414C18.9414 6.71467 18.9414 7.34783 18.5509 7.73836L10.5821 15.7071C10.1916 16.0976 9.55842 16.0976 9.16789 15.7071L4.94914 11.4884C4.55862 11.0978 4.55862 10.4647 4.94914 10.0741C5.33967 9.68362 5.97283 9.68362 6.36336 10.0741L9.875 13.5858L17.1366 6.32414C17.5272 5.93362 18.1603 5.93362 18.5509 6.32414Z' fill='white'/%3E%3C/svg%3E%0A");
}

.ds-checkbox__input:checked {
  --dsc-checkbox-border-color: var(--ds-color-accent-base-default);
  --dsc-checkbox-background: var(--ds-color-accent-base-default);
  --dsc-checkbox-check_color: var(--ds-color-accent-contrast-1);

  background: var(--dsc-checkbox-background);
}

.ds-checkbox__input:indeterminate {
  --dsc-checkbox-border-color: var(--ds-color-accent-base-default);
  --dsc-checkbox-background: var(--ds-color-accent-base-default);
  --dsc-checkbox-check_color: var(--ds-color-accent-contrast-1);
}

.ds-checkbox__input:indeterminate::after {
  mask-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 23 23' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M4.25 11.25C4.25 10.4216 4.92157 9.75 5.75 9.75H16.75C17.5784 9.75 18.25 10.4216 18.25 11.25C18.25 12.0784 17.5784 12.75 16.75 12.75H5.75C4.92157 12.75 4.25 12.0784 4.25 11.25Z' fill='white' /%3E%3C/svg%3E%0A");
}

.ds-checkbox--readonly > .ds-checkbox__input {
  --dsc-checkbox-border-color: var(--ds-color-neutral-border-subtle);
  --dsc-checkbox-background: var(--ds-color-neutral-background-subtle);
}

.ds-checkbox__input:disabled,
.ds-checkbox__input:disabled ~ .ds-checkbox__label,
.ds-checkbox__input:disabled ~ .ds-checkbox__description {
  opacity: var(--ds-disabled-opacity);
}

/* .ds-checkbox__input:checked:not(:focus-visible) {
    box-shadow: inset 0 0 0 2px var(--dsc-checkbox-border-color);
  } */

.ds-checkbox:has(.ds-checkbox__input:focus-visible) {
  --dsc-focus-border-width: 3px;

  outline: var(--dsc-focus-border-width) solid var(--ds-color-focus-outer);
  outline-offset: var(--dsc-focus-border-width);
  box-shadow: 0 0 0 var(--dsc-focus-border-width) var(--ds-color-focus-inner);
  border-radius: var(--ds-border-radius-md);
}

.ds-checkbox--readonly > .ds-checkbox__input:checked {
  --dsc-checkbox-check_color: var(--ds-color-neutral-text-subtle);

  background: var(--dsc-checkbox-background);
}

.ds-checkbox--readonly > .ds-checkbox__input:indeterminate {
  --dsc-checkbox-check_color: var(--ds-color-neutral-text-subtle);

  background: var(--dsc-checkbox-background);
}

.ds-checkbox--error > .ds-checkbox__input:not(:disabled, :focus-visible) {
  --dsc-checkbox-border-color: var(--ds-color-danger-border-default);
}

/* Only use hover for non-touch devices to prevent sticky-hovering
    "input:not(:read-only)" does not work so using ".container:not(.readonly) >" instead */
@media (hover: hover) and (pointer: fine) {
  .ds-checkbox:not(.ds-checkbox--readonly) .ds-checkbox__input:not(:disabled) ~ .ds-checkbox__label:hover,
  .ds-checkbox:not(.ds-checkbox--readonly) .ds-checkbox__input:hover:not(:disabled) ~ .ds-checkbox__label {
    color: var(--ds-color-accent-text-subtle);
  }

  .ds-checkbox:not(.ds-checkbox--readonly) .ds-checkbox__input:hover:not(:checked, :disabled, :focus-visible) {
    --dsc-checkbox-border-color: var(--ds-color-accent-border-strong);

    box-shadow: var(--dsc-checkbox-border__hover), inset 0 0 0 2px var(--dsc-checkbox-border-color);
  }

  .ds-checkbox:not(.ds-checkbox--readonly) .ds-checkbox__input:indeterminate:hover:not(:focus-visible) {
    --dsc-checkbox-border-color: var(--ds-color-accent-border-strong);

    box-shadow: var(--dsc-checkbox-border__hover);
  }

  .ds-checkbox:not(.ds-checkbox--readonly) .ds-checkbox__input:hover:checked:not(:disabled, :focus-visible) {
    box-shadow: var(--dsc-checkbox-border__hover);
  }
}

/** Sizing */

.ds-checkbox--sm {
  --dsc-checkbox-size: var(--ds-sizing-5);

  /* min-height: var(--ds-sizing-10); */
}

.ds-checkbox--md {
  --dsc-checkbox-size: var(--ds-sizing-6);

  /* min-height: var(--ds-sizing-11); */
}

.ds-checkbox--lg {
  --dsc-checkbox-size: var(--ds-sizing-7);

  /* min-height: var(--ds-sizing-12); */
}

.ds-checkbox__group {
  --dsc-checkbox-group-gap: var(--ds-spacing-4);

  display: flex;
  flex-direction: column;
  gap: var(--dsc-checkbox-group-gap);
  width: fit-content;
}

.ds-checkbox__group--sm {
  --dsc-checkbox-group-gap: var(--ds-spacing-3);

  margin-top: calc(var(--ds-spacing-1) * -1);
}

.ds-checkbox__group--md {
  --dsc-checkbox-group-gap: var(--ds-spacing-4);
}

.ds-checkbox__group--lg {
  --dsc-checkbox-group-gap: var(--ds-spacing-5);

  margin-top: var(--ds-spacing-1);
}

.ds-chip {
  --dsc-chip-background: var(--ds-color-accent-surface-default);
  --dsc-chip-border-color: var(--ds-color-accent-border-subtle);
  --dsc-chip-border-radius: var(--ds-border-radius-full);
  --dsc-chip-color: var(--ds-color-accent-text-default);
  --dsc-chip-height: var(--ds-sizing-8);
  --dsc-chip-icon-size: var(--ds-spacing-6);
  --dsc-chip-input-color: var(--ds-color-accent-border-default);
  --dsc-chip-input-size: var(--ds-spacing-5);
  --dsc-chip-padding: 0 var(--ds-spacing-3);

  @composes ds-focus from './base/base.css';
  @composes ds-body-text--short-sm from './base/base.css';

  align-items: center;
  background: var(--dsc-chip-background);
  border-radius: var(--dsc-chip-border-radius);
  border: 1px solid var(--dsc-chip-border-color);
  box-sizing: border-box;
  color: var(--dsc-chip-color);
  cursor: pointer;
  display: inline-flex;
  font-family: inherit;
  min-height: var(--dsc-chip-height);
  padding: var(--dsc-chip-padding);
  text-decoration: none;

  /* Make focus ring also when input inside is focused */
  &:has(:focus-visible) {
    @composes ds-focus--visible from './base/base.css';
  }

  &:disabled,
  &:has(input:disabled),
  &[aria-disabled='true'] {
    cursor: not-allowed;
    opacity: var(--ds-disabled-opacity);
  }

  &:has(input[type='checkbox']) {
    --dsc-chip-border-radius: var(--ds-border-radius-md);
    --dsc-chip-padding: 0 var(--ds-spacing-2) 0 var(--ds-spacing-3);
  }

  &[data-removable]::after {
    --gap: calc((var(--dsc-chip-height) - var(--dsc-chip-icon-size)) / 2); /* Gap is based on remaining space between icon and edge */

    background: currentcolor;
    content: '';
    height: var(--dsc-chip-icon-size);
    margin: 0 calc(var(--gap) * -1) 0 var(--gap);
    mask: center / contain no-repeat
      url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' fill='none' viewBox='0 0 24 24' focusable='false' role='img'%3E%3Cpath fill='currentColor' d='M6.53 5.47a.75.75 0 0 0-1.06 1.06L10.94 12l-5.47 5.47a.75.75 0 1 0 1.06 1.06L12 13.06l5.47 5.47a.75.75 0 1 0 1.06-1.06L13.06 12l5.47-5.47a.75.75 0 0 0-1.06-1.06L12 10.94z'%3E%3C/path%3E%3C/svg%3E");
    width: var(--dsc-chip-icon-size);
  }

  &[data-size='sm'] {
    --dsc-chip-height: var(--ds-sizing-7);
    --dsc-chip-icon-size: var(--ds-sizing-5);
    --dsc-chip-input-size: var(--ds-spacing-4);

    @composes ds-body-text--short-xs from './base/base.css';
  }

  &[data-size='lg'] {
    --dsc-chip-height: var(--ds-sizing-9);
    --dsc-chip-icon-size: var(--ds-sizing-7);
    --dsc-chip-input-size: var(--ds-spacing-6);

    @composes ds-body-text--short-md from './base/base.css';
  }

  & > input {
    --gap: calc((var(--dsc-chip-height) - var(--dsc-chip-input-size)) / 2); /* Gap is based on remaining space between input and edge */

    appearance: none;
    background: none;
    border: 2px solid;
    box-sizing: border-box;
    color: var(--dsc-chip-input-color);
    height: var(--dsc-chip-input-size);
    margin: 0 var(--gap) 0 calc(var(--gap) * -1);
    outline: none;
    width: var(--dsc-chip-input-size);

    &[type='radio'] {
      border-radius: var(--ds-border-radius-full);
    }

    &[type='radio']:checked {
      border-width: calc(var(--dsc-chip-input-size) / 3.5); /* Matches Figma */
    }

    &[type='checkbox'] {
      border-radius: var(--ds-border-radius-sm);
    }

    &[type='checkbox']:checked {
      background: currentcolor;
      mask: center / cover no-repeat
        url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' d='M24 0H0v24h24V0Zm-4.44 8.56a1.5 1.5 0 0 0-2.12-2.12L10 13.88l-3.44-3.44a1.5 1.5 0 0 0-2.12 2.12l4.5 4.5a1.5 1.5 0 0 0 2.12 0l8.5-8.5Z'/%3E%3C/svg%3E");
    }
  }

  &:has(input:checked),
  &[data-removable] {
    --dsc-chip-background: var(--ds-color-accent-base-default);
    --dsc-chip-border-color: transparent;
    --dsc-chip-color: var(--ds-color-accent-contrast-default);
    --dsc-chip-input-color: currentcolor;
  }

  /* Only use hover for non-touch devices to prevent sticky-hovering */
  @media (hover: hover) and (pointer: fine) {
    &:where(:not(:disabled, :has(input:disabled), [aria-disabled='true'])) {
      &:hover {
        --dsc-chip-background: var(--ds-color-accent-surface-hover);
        --dsc-chip-border-color: var(--ds-color-accent-border-default);
        --dsc-chip-color: var(--ds-color-accent-text-default);
        --dsc-chip-input-color: var(--ds-color-accent-border-strong);
      }

      &:active {
        --dsc-chip-background: var(--ds-color-accent-surface-active);
        --dsc-chip-border-color: var(--ds-color-accent-border-strong);
        --dsc-chip-input-color: var(--ds-color-accent-border-strong);
      }

      &[data-removable]:hover,
      &:has(input:checked):hover {
        --dsc-chip-background: var(--ds-color-accent-base-hover);
        --dsc-chip-border-color: transparent;
        --dsc-chip-color: var(--ds-color-accent-contrast-default);
        --dsc-chip-input-color: currentcolor;
      }

      &[data-removable]:active,
      &:has(input:checked):active {
        --dsc-chip-background: var(--ds-color-accent-base-active);
        --dsc-chip-border-color: transparent;
        --dsc-chip-color: var(--ds-color-accent-contrast-default);
      }
    }
  }
}
